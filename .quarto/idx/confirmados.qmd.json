{"title":"Pronóstico de infectados diarios","markdown":{"yaml":{"lang":"es"},"headingText":"Pronóstico de infectados diarios","containsRefs":false,"markdown":"\n\n\n```{r, echo=FALSE, message=FALSE, warning=FALSE}\nlibrary(zoo,warn.conflicts=FALSE)\nlibrary(lubridate,warn.conflicts=FALSE)\nlibrary(mgcv,warn.conflicts=FALSE)\nlibrary(rugarch,warn.conflicts=FALSE)\n# visualization\nsuppressPackageStartupMessages(library(ggplot2))\n# getting financial data\nsuppressPackageStartupMessages(library(quantmod))\n# calculating returns\nsuppressPackageStartupMessages(library(PerformanceAnalytics))\n# GARCH modeling\nsuppressPackageStartupMessages(library(rugarch))\n# ARCH test\nsuppressPackageStartupMessages(library(FinTS))\n# ARMA modeling\nsuppressPackageStartupMessages(library(forecast))\n# structural changes\nsuppressPackageStartupMessages(library(strucchange))\n# ARMA order identification\nsuppressPackageStartupMessages(library(TSA))\nlibrary(tseries)\nlibrary(timeSeries)\nlibrary(tswge)\nlibrary(xts)\nlibrary(pastecs)\nlibrary(tidyr)\nlibrary(dplyr)\nlibrary(dygraphs)\nlibrary(splines)\nlibrary(kableExtra)\nlibrary(conflicted)\nlibrary(goeveg)\nlibrary(tidyverse)\nrm(list=ls())\nlibrary(FinTS)\nlibrary(rugarch)\nlibrary(tseries)\nlibrary(dynlm)\nlibrary(vars)\nlibrary(nlWaldTest)\nlibrary(broom)\nlibrary(readxl)\nlibrary(plotly)\nlibrary(nnfor)\nlibrary(neuralnet)\n```\n\n## Obtención de datos\n\n::: {style=\"text-align: justify\"}\nConforme se ha referido previamente, se emplea el conjunto de datos global informado diariamente, disponible para su descarga en <https://covid19.who.int/WHO-COVID-19-global-data.csv.> Resulta relevante destacar que la base de datos consultada corresponde al 16 de Enero del 2023, restringiéndose a los datos concernientes exclusivamente a los casos confirmados en Irán entre el 20 de febrero y el 15 de agosto de 2020.\n\nEl análisis posterior se ha llevado a cabo empleando el software R versión 4.3.2. Con el propósito de realizar el análisis de los datos y la generación de gráficos, se procedió a convertir los datos al formato *ts*, lo que permitió su representación como una serie temporal.\n:::\n\n```{r, echo=FALSE}\n# Importamos la base de datos total\nCOVID.19.global.data <- read.csv(\"WHO-COVID-19-global-data.csv\")\n#Dataframe de los casos confirmados en Irán\nCOVID.IRAN <- data.frame(Date=COVID.19.global.data$Date_reported[108535:108742],\n                         Confirmed=COVID.19.global.data$New_cases[108535:108742])\n#Dataframe de los casos confirmados en Irán del 20-02-2020 al 15-08-2020\nConfirmed_df <- data.frame(COVID.IRAN[1:178,])\n#Ponemos las fechas en formato 'Date'\nConfirmed_df$Date <- as.Date(Confirmed_df$Date)\n```\n\n```{r}\n# Se crea un objeto 'Date' diario\ninds <- seq(as.Date(\"2020-02-20\"), as.Date(\"2020-08-15\"), by = \"day\")\n# Se crea un objeto 'serie de tiempo' de frecuencia diaria\nConfirmed_ts <- ts(Confirmed_df[2], \n                   start = c(2020, as.numeric(format(inds[1], \"%j\"))),\n                   frequency = 365)\n```\n\n::: {.content-visible when-format=\"pdf\"}\n```{r, echo=FALSE}\n#| label: fig-oripdf\n#| fig-cap: \"Serie de tiempo de los casos de COVID-19 confirmados en Irán del 20-02-2020 al 15-08-2020.\"\nplot(Confirmed_ts)\n```\n:::\n\n::: {.content-visible when-format=\"html\"}\n::: {#fig-ori}\n```{r, warning=FALSE, message=FALSE, echo=FALSE}\nfig <- plot_ly(Confirmed_df, type = 'scatter', mode = 'lines')%>%\n  add_trace(x = ~Date, y = ~Confirmed)%>%\n  plotly::layout(showlegend = F)\nfig <- fig %>%\n  plotly::layout(\n         xaxis = list(zerolinecolor = '#ffff',\n                      zerolinewidth = 2,\n                      gridcolor = 'ffff'),\n         yaxis = list(zerolinecolor = '#ffff',\n                      zerolinewidth = 2,\n                      gridcolor = 'ffff'),\n         plot_bgcolor='#e5ecf6')\n\nfig\n```\n\nSerie de tiempo de los casos de COVID-19 confirmados en Irán del 20-02-2020 al 15-08-2020.\n:::\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n::: {style=\"text-align: justify\"}\nLa gráfica de la @fig-oripdf exhibe la serie temporal derivada de la base de datos, en la cual se evidencia la ausencia de información para los días 27 y 29 de Febrero, así como para el 02 de Marzo y el 05 de Abril de 2020. Para subsanar esta carencia de datos, se llevó a cabo una interpolación promedio a fin de sustituir los valores faltantes. La @fig-tspdf muestra la serie de tiempo resultante de estas correcciones.\n:::\n:::\n\n::: {.content-visible when-format=\"html\" style=\"text-align: justify\"}\nLa gráfica de la @fig-ori exhibe la serie temporal derivada de la base de datos, en la cual se evidencia la ausencia de información para los días 27 y 29 de Febrero, así como para el 02 de Marzo y el 05 de Abril de 2020. Para subsanar esta carencia de datos, se llevó a cabo una interpolación promedio a fin de sustituir los valores faltantes. La @tbl-datatable muestra la base de datos con las modificaciones efectuadas, así como la serie de tiempo (@fig-ts) resultante de estas correcciones.\n:::\n\n```{r, echo=FALSE}\n#Función para eliminar los ceros (por interpolación promedio)\nfor (i in 2:length(Confirmed_df$Date)-1) {\n  if (Confirmed_df$Confirmed[i]==0) {\n    Confirmed_df$Confirmed[i] <- (Confirmed_df$Confirmed[i-1]+ \n    Confirmed_df$Confirmed[i+1])/2}}\nConfirmed_ts <- ts(Confirmed_df[2], \n                   start = c(2020, as.numeric(format(inds[1], \"%j\"))),\n                   frequency = 365)\n```\n\n::: {.content-visible when-format=\"html\"}\n```{r, echo=FALSE}\n#| label: tbl-datatable\n#| tbl-cap: \"Casos confirmados ajustados del 20-02-2020 al 15-08-2020.\"\nlibrary(DT)\ndatatable(Confirmed_df, style = 'bootstrap4')\n```\n:::\n\n::: {.content-visible when-format=\"html\"}\n::: {#fig-ts}\n```{r, warning=FALSE, message=FALSE, echo=FALSE}\nfig <- plot_ly(Confirmed_df, type = 'scatter', mode = 'lines')%>%\n  add_trace(x = ~Date, y = ~Confirmed)%>%\n  plotly::layout(showlegend = F)\nfig <- fig %>%\n  plotly::layout(\n         xaxis = list(zerolinecolor = '#ffff',\n                      zerolinewidth = 2,\n                      gridcolor = 'ffff'),\n         yaxis = list(zerolinecolor = '#ffff',\n                      zerolinewidth = 2,\n                      gridcolor = 'ffff'),\n         plot_bgcolor='#e5ecf6')\n\nfig\n```\n\nSerie de tiempo de los casos de COVID-19 confirmados en Irán del 20-02-2020 al 15-08-2020\n:::\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n```{r, echo=FALSE}\n#| label: fig-tspdf\n#| fig-cap: \"Serie de tiempo de los casos de COVID-19 confirmados en Irán del 20-02-2020 al 15-08-2020.\"\nplot(Confirmed_ts)\n```\n:::\n\n## Análisis de la serie de tiempo de casos confirmados de COVID-19 en Irán\n\n### Estadística descriptiva\n\n::: {style=\"text-align: justify\"}\nCon el propósito de llevar a cabo una auditoría de los datos y al mismo tiempo una descripción preliminar, se ejecuta un estudio de estadística descriptiva que arroja los resultados correspondientes, incluyendo un gráfico Boxplot (@fig-box) para representar la información o\n:::\n\n```{r, echo=FALSE}\nsummary(Confirmed_df$Confirmed)\n```\n\n::: {#fig-box}\n```{r, echo=FALSE}\nlibrary(plotly)\nfig <- plot_ly(Confirmed_df, y = ~Confirmed, type = 'box')\nfig\n```\n\nBoxplot de casos confirmados de COVID-19 en Irán del 20-02-2020 al 15-08-2020.\n:::\n\n### Componentes de la serie de tiempo\n\n::: {style=\"text-align: justify\"}\nLos componentes identificados en la serie de tiempo de casos confirmados de COVID-19 en Irán, revelan distintos patrones y características.\n\nEn primer lugar, se observa una tendencia discernible en el gráfico de la serie temporal (@fig-ts). Por ejemplo, entre el 30 de marzo y el 03 de mayo de 2020, se evidencia una tendencia negativa o decreciente, seguida por una tendencia creciente a partir del 03 de mayo en adelante. Estos cambios en la tendencia podrían indicar fluctuaciones significativas en la evolución de los casos confirmados durante esos periodos específicos.\n\nEn cuanto a la estacionalidad, aunque no se identifica claramente a simple vista en el periodo observado, la extensión del análisis a un periodo más amplio podría revelar patrones recurrentes o ciclos temporales característicos. Es posible que ciertos patrones estacionales se manifiesten en intervalos más extensos de la serie temporal, lo que implicaría variaciones sistemáticas y repetitivas en los datos en períodos específicos.\n\nPor último, se destacan pequeñas subidas y bajadas en el gráfico que sugieren la presencia de **ruido** en la serie temporal. Estas fluctuaciones irregulares podrían atribuirse a diversas causas, como posibles errores en la recolección de datos o fluctuaciones aleatorias inherentes al comportamiento de la enfermedad. Es importante considerar estas variaciones no sistemáticas al analizar la serie temporal, ya que podrían influir en la interpretación de los patrones y tendencias observadas.\n:::\n\n### Estacionariedad\n\n::: {style=\"text-align: justify\"}\nA continuación, se emplea el test de Dickey-Fuller para examinar la presencia de estacionariedad en la serie temporal. Este test fue utilizado con la finalidad de identificar la existencia de raíces unitarias en la serie, lo cual permite inferir la presencia o ausencia de estacionariedad en los datos analizados.\n:::\n\n```{r}\nadf.test(Confirmed_ts, alternative = \"stationary\")\n```\n\n::: {style=\"text-align: justify\"}\nLa hipótesis nula $(H_0)$ asume la presencia de raíces unitarias, lo que indica no estacionariedad en la serie. Al obtener un $p-$valor superior al nivel de significancia establecido el cuál es del $95\\%$, no se rechaza la hipótesis nula, sugiriendo la ausencia de estacionariedad en la serie de tiempo de casos confirmados.\n\nAdemás, se complementa la evaluación de la estacionalidad mediante la inspección de los gráficos de la función de autocorrelación (ACF) y la función de autocorrelación parcial (PACF). Estos gráficos se utilizan para identificar patrones de autocorrelación en la serie temporal, lo que permite visualizar la presencia de estacionalidad, tendencias o ciclos.\n:::\n\n::: {style=\"text-align: justify\"}\nLa serie de tiempo representada en la @fig-ts exhibe un comportamiento característico de deambulación aleatoria. Dado que el valor de la variable $X_{t+1}$ generalmente se encuentra en proximidad al valor $X_t$, se evidencia una autocorrelación positiva notablemente marcada entre las variables $X_t$ y $X_{t+1}$.\n\n::: {#fig-acf}\n```{r,warning=FALSE, message=FALSE}\nautoplot(acf(Confirmed_ts, plot = FALSE), \n         main=\"Autocorrelograma de casos confirmados.\")\n```\n\nAutocorrelograma de los casos confirmados de COVID-19 en Irán\n:::\n\nEn la @fig-acf se observa que la autocorrelación (vea la ecuación ([-@eq-autocorr])) entre $X_t$ y $X_{t+k}$ decrece con el incremento del retraso $k$. Este declive conduce a la constatación de que, a un desfase de $20$, existe una correlación bastante débil entre $X_t$ y $X_{t+20}$. Al analizar el gráfico de la función de autocorrelación (ACF), se aprecia que $\\rho_{20}\\approx 0.19$.\n\nLa gráfica de la Función de Autocorrelación Parcial (PACF) proporciona información valiosa sobre la estructura de autocorrelación de una serie temporal una vez han sido eliminadas las correlaciones debidas a los intervalos de tiempo intermedios.\n\n::: {#fig-pacf}\n```{r,warning=FALSE, message=FALSE}\nggPacf((Confirmed_ts), main = 'Autocorrelograma parcial de casos confirmados.')\n```\n\nAutocorrelograma Parcial de los casos confirmados de COVID-19 en Irán\n:::\n\nConsiderando que los datos se ajustan a un modelo de series de tiempo, la @fig-pacf indica que el valor de correlación $\\phi_{15}$ es ligeramente superior a $0.25$, aproximadamente $\\phi_{52}\\approx 0.16$, y $\\phi_{76}\\approx 0.15$, mientras que para los restantes valores, la correlación parcial no es nula.\n\n::: remark\nDe acuerdo con la gráfica de la Función de Autocorrelación Parcial @fig-pacf, se observa un corte abrupto después del rezago 4, lo cual sugiere que las autocorrelaciones parciales más allá de ese punto no poseen significancia estadística. Por consiguiente, se infiere la posibilidad de ajustar un modelo autoregresivo AR(4) a la base de datos.\n\n```{r, warning=FALSE, message=FALSE}\nlibrary(tswge)\ncoeff <- est.ar.wge(Confirmed_ts, p=4)\ncoeff$phi #coeficientes\ncoeff$xbar #media\ncoeff$avar #varianza finita\n```\n\nEl modelo autoregresivo AR(4) se expresa mediante la siguiente ecuación:\n\n$$\n(1-0.865B-0.172B^2-0.059B^3+0.131B^4)(X_t-1922.868)+a_t,\n$$ {#eq-AR4}\n\ndonde $\\hat{\\sigma}_a^2 = 47818.04$.\n:::\n:::\n\n::: {style=\"text-align: justify\"}\nEl análisis del ACF y PACF proporcionó información sobre la relación de los puntos de datos con sus rezagos, permitiendo observar posibles patrones estacionales. La presencia de picos significativos en estos gráficos podría indicar la existencia de estacionalidad en la serie de tiempo.\n:::\n\n## Entrenamiento, modelado, pronóstico y métricas de rendimiento\n\n::: {style=\"text-align: justify\"}\nSe procede a la evaluación del rendimiento de métodos destinados al ajuste y consecuente pronóstico. Específicamente, se contempla el método de suavizamiento exponencial de Holt-Winters y el ajuste mediante un modelo de red neuronal del tipo perceptrón multicapa. Ambos procedimientos requieren la subdivisión de los datos en conjuntos destinados a entrenamiento y prueba. El set inicial, compuesto por el $70\\%$ de los datos, se emplea para el entrenamiento de los modelos, mientras que el $30\\%$ restante se reservará para llevar a cabo las pruebas pertinentes.\n:::\n\n```{r}\nConfirmed_ts <- ts(Confirmed_ts,frequency=1)\ntsize <- round(0.7 * nrow(Confirmed_df))\ntrain_confirmed <- window(Confirmed_ts,end=tsize)\ntest_confirmed <- window(Confirmed_ts,start=tsize+1)\n```\n\n### Holt-Winters {#sec-holt-winters}\n\n::: {style=\"text-align: justify\"}\nCon el fin de determinar la descomposición más adecuada para los datos en cuestión, se empleó un criterio elaborado basado en el coeficiente de variación, el cual proporciona una recomendación entre las dos versiones disponibles.\n\n```{r}\nDescRec <- function(x){\n  n = length(x)\n  di = rep(0, n-1)\n  ci = rep(0, n-1)\n  for (i in 1:n-1) {\n    di[i] = x[i+1] - x[i]\n    ci[i] = x[i+1] / x[i]\n  }\n  d <- cv(di) \n  c <- cv(ci) / mean(di)\n  if(d < c)\n    print(\"Se recomienda la descomposición aditiva\")\n  else\n    print(\"Se recomienda la descomposición multiplicativa\")\n}\nDescRec(train_confirmed)\n```\n\nDe acuerdo con la recomendación observada, se sugiere la utilización de la versión multiplicativa (vea la ecuación ([-@eq-muldecom])). En consecuencia, se procede a mostrar la representación gráfica de la descomposición multiplicativa de la serie temporal.\n\n::: {#fig-descomp}\n```{r}\nts_train <- ts(train_confirmed, frequency = 2)\ncomponents_ts <- decompose(ts_train, type = 'mult')\nplot(components_ts)\n```\n\nDescomposición multiplicativa de la serie de tiempo.\n:::\n\nSe procede ahora a la aplicación del modelo multiplicativo de Holt-Winters a la serie temporal de los datos de entrenamiento utilizando una frecuencia de dos, con el fin de permitir la aplicabilidad del modelo.\n:::\n\n```{r}\nHWc <- HoltWinters(ts_train, seasonal = 'mult')\nHWc\n```\n\n::: {style=\"text-align: justify\"}\nFinalmente, utilizando el modelo de entrenamiento desarrollado en la fase previa, se lleva a cabo la proyección con un horizonte de predicción igual en extensión a los datos de prueba, acompañado de un intervalo de confianza que oscila entre el $80\\%$ y el $95\\%$.\n:::\n\n```{r}\nHWc_for <- forecast(HWc, h=length(test_confirmed))\n```\n\n::: {.callout-note style=\"text-align: justify\"}\nLas funciones aplicadas en esta sección son parte de la librería ***stats*** @stats de R.\n:::\n\n### MLP\n\n::: {style=\"text-align: justify\"}\nPosteriormente, se procede al entrenamiento del modelo MLP (Perceptrón Multicapa). La cantidad de capas ocultas y la configuración de nodos en cada capa se determinaron de manera automatizada mediante el método de [validación cruzada de 5 pliegues](redes.qmd#sec-validación-cruzada-de-k-pliegues). Asimismo, se eligió la función de activación como sigmoide, y el proceso de entrenamiento del modelo se ejecutó a lo largo de 20 iteraciones.\n:::\n\n```{r}\nfitc <- mlp(train_confirmed, hd.auto.type=\"cv\", reps=20, comb='median')\nfitc\n```\n\n::: {#fig-red}\n```{r}\nplot(fitc)\n```\n\nEstructura de la red neuronal resultante.\n:::\n\n::: {style=\"text-align: justify\"}\nPara llevar a cabo el pronóstico, se emplea el modelo de entrenamiento creado en la etapa anterior, manteniendo un horizonte de predicción que coincide en duración con los datos de prueba, tal como se hizo con la técnica anterior.\n:::\n\n```{r}\nfrcc <- forecast(fitc,h=length(test_confirmed))\n```\n\n::: {.callout-note style=\"text-align: justify\"}\nLas funciones aplicadas en esta sección son parte de la librería ***nnfor*** @nnfor de R.\n:::\n\n### Comparación de pronósticos con el conjunto de datos de prueba\n\n::: {style=\"text-align: justify\"}\nCon el propósito de llevar a cabo un análisis cuantitativo exhaustivo, se presenta a continuación una tabla comparativa de los resultados derivados de las dos técnicas implementadas y la base de datos de prueba. Posteriormente, se exhiben gráficas representativas de estos resultados. En la @fig-phw se muestra el pronóstico mediante Holt-Winters acompañado de su respectivo intervalo de confianza. En contraste, en la @fig-pmlp, la gráfica punteada en color rojo representa el comportamiento real de los datos, mientras que en azul se representa el pronóstico obtenido a través de la red MLP.\n:::\n\n::: {.content-visible when-format=\"html\"}\n```{r,echo=FALSE}\n#| label: tbl-forecast\n#| tbl-cap: \"Comparación de Resultados entre las técnicas y los datos reales para evaluar precisión.\"\ncfor <- data.frame(Date=Confirmed_df$Date[126:178], Real= test_confirmed,\n                   Forecast_HW=HWc_for$mean,Forecast_MLP=frcc$mean)\nDT::datatable(cfor, style = 'bootstrap4')\n```\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n```{r, echo=FALSE}\n#| label: tbl-forecastpdf\n#| tbl-cap: \"Comparación de Resultados entre las técnicas y los datos reales para evaluar precisión\"\ncfor\n```\n:::\n\n::: {#fig-phw}\n```{r, echo=FALSE, size=1500}\nplot(HWc_for,type='l',main=\"Forcasts from HW\",ylab=\"Confirmed\",xlab= \"Date: from Feb. 20, 2020, to Aug. 15, 2020\")\nlines(test_confirmed,lty=5, col='red')\n```\n\nPronóstico obtenido mediante la técnica de Holt-Winters.\n:::\n\n::: {#fig-pmlp}\n```{r,echo=FALSE}\nplot(frcc,main=\"Forcasts from MLP\",ylab=\"Confirmed\",xlab= \"Date: from Feb. 20, 2020, to Aug. 15, 2020\", col='blue')\nlines(test_confirmed,lty=5, col='red')\n```\n\nPronóstico obtenido mediante la red neuronal MLP.\n:::\n\n#### Métricas de rendimiento\n\n::: {style=\"text-align: justify\"}\nPara evaluar la calidad o bondad de ajuste de los métodos utilizados en este estudio y seleccionar el modelo más apropiado, se aplican tres métricas de rendimiento, Error Cuadrático Medio ([-@eq-RMSE]), Error Absoluto Medio ([-@eq-MAE]) y Error Porcentual Absoluto Medio ([-@eq-MAPE]) tanto en las fases de entrenamiento como en las de prueba. Los resultados correspondientes a éstas métricas se presentan en la @tbl-err .\n\n```{r,echo=FALSE,attr.output='style=\"max-height:100px;\"'}\n##### Training and Testing Errores #####\nHW_train = generics::accuracy(train_confirmed[3:125], HWc_for$fitted[3:125])[1,1:5]\nHW_test = generics::accuracy(cfor$Confirmed, cfor$Forecast_HW)[1,1:5]\nMLP_train = generics::accuracy(train_confirmed[5:125], frcc$fitted)[1,1:5]\nMLP_test = generics::accuracy(cfor$Confirmed, cfor$Forecast_MLP)[1,1:5]\nTraining_Data <- data.frame(\n  RMSE = c(HW_train[2], MLP_train[2]),\n  MAE = c(HW_train[3], MLP_train[3]),\n  MAPE = c(HW_train[5], MLP_train[5]),\n  row.names = c(\"Holt-Winters\", \"MLP\")\n)\nTesting_Data <- data.frame(\n  RMSE = c(HW_test[2], MLP_test[2]),\n  MAE = c(HW_test[3], MLP_test[3]),\n  MAPE = c(HW_test[5], MLP_test[5]),\n  row.names = c(\"Holt-Winters\", \"MLP\")\n)\nConfirmed_Cases <- data.frame(Trainig = Training_Data, Testing =Testing_Data)\n#Confirmed_Cases\n```\n\n|                  |            |                |           |            |               |          |\n|-----------|:---------:|:---------:|:---------:|:---------:|:---------:|:---------:|\n|                  |            | ***Training*** |           |            | ***Testing*** |          |\n|                  |  **RMSE**  |    **MAE**     | **MAPE**  |  **RMSE**  |    **MAE**    | **MAPE** |\n| **Holt-Winters** | *262.9925* |   *190.0482*   | *20.8415* | *234.0094* |  *165.8208*   | *6.2967* |\n| **MLP**          | *239.3483* |   *180.9937*   | *14.6079* | *177.0605* |  *136.4799*   | *5.4441* |\n\n: Errores de los modelos para casos confirmados. {#tbl-err}\n:::\n\n### Conclusión\n\n::: {.content-visible when-format=\"html\"}\n::: {style=\"text-align: justify\"}\nBasándose en los resultados extraídos tanto de la tabla de pronósticos (@tbl-forecast) como de la tabla de errores (@tbl-err), se llega a la conclusión de que, para esta base de datos en particular, la técnica de redes neuronales MLP demuestra ser más efectiva en la predicción realizada. Esto se fundamenta en la evidencia de un menor error registrado en las tres métricas calculadas, tanto durante la fase de entrenamiento como en la fase de prueba.\n:::\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n::: {style=\"text-align: justify\"}\nBasándose en los resultados extraídos tanto de la tabla de pronósticos (@tbl-forecastpdf) como de la tabla de errores (@tbl-err), se llega a la conclusión de que, para esta base de datos en particular, la técnica de redes neuronales MLP demuestra ser más efectiva en la predicción realizada. Esto se fundamenta en la evidencia de un menor error registrado en las tres métricas calculadas, tanto durante la fase de entrenamiento como en la fase de prueba.\n:::\n:::\n\n## Pronóstico de los próximos 30 días\n\n::: {.content-visible when-format=\"html\" style=\"text-align: justify\"}\nTras la identificación del modelo óptimo, se procedió a prever el comportamiento futuro de la serie temporal de casos confirmados para los próximos 30 días utilizando dicho modelo. Se elaboraron representaciones gráficas de la predicción de casos confirmados de COVID-19 a 30 días, realizando una comparación de la efectividad entre las implementaciones de redes neuronales en la paquetería de R y la paquetería nativa de Python, las cuales se encuentran en las figuras @fig-foremlp y @fig-mlp, respectivamente.\n:::\n\n::: {.content-visible when-format=\"pdf\" style=\"text-align: justify\"}\nTras la identificación del modelo óptimo, se procedió a prever el comportamiento futuro de la serie temporal de casos confirmados para los próximos 30 días utilizando dicho modelo. Se elaboraron representaciones gráficas de la predicción de casos confirmados de COVID-19 a 30 días, realizando una comparación de la efectividad entre las implementaciones de redes neuronales en la paquetería de R y la paquetería nativa de Python, las cuales se encuentran en las figuras @fig-foremlp y @fig-mlp1, respectivamente.\n:::\n\n### Implementación en R\n\n::: {style=\"text-align: justify\"}\nEn la implementación de R, siguiendo el mismo procedimiento que en las fases de entrenamiento y prueba, se empleó un número específico de capas y nodos ocultos determinados automáticamente a través del método de validación cruzada de 5 pliegues. Esta configuración se llevó a cabo con una función de activación sigmoide, ejecutando 20 iteraciones para el entrenamiento de la red neuronal.\n\n```{r}\nfit.mlp = mlp(ts(Confirmed_df$Confirmed), reps = 20, hd.auto.type = 'cv', \n              comb=\"median\")\nfore.mlp = forecast(fit.mlp, h = 30)\n```\n\n::: {#fig-foremlp}\n```{r,echo=FALSE}\nplot(fore.mlp)\n```\n\nPredicción futura de la serie tiempo para infectados diariamente mediante el modelo MLP.\n:::\n\n::: {.content-visible when-format=\"html\"}\n::: {style=\"text-align: justify\"}\nLos resultados del pronóstico indican que, el 14 de septiembre de 2020, se proyectan aproximadamente 2494 nuevos casos confirmados de COVID-19. Estos valores correspondientes al período de 30 días se detallan a continuación en la @tbl-treinta .\n:::\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n::: {style=\"text-align: justify\"}\nLos resultados del pronóstico indican que el 14 de septiembre de 2020 se proyectan aproximadamente 2494 nuevos casos confirmados de COVID-19. Estos valores correspondientes al período de 30 días se detallan a continuación en la @tbl-treintapdf .\n:::\n:::\n\n::: {.content-visible when-format=\"html\"}\n```{r, echo=FALSE}\n#| label: tbl-treinta\n#| tbl-cap: \"Pronóstico de casos confirmados de COVID-19 en Irán en los próximos 30 días.\"\n#|\nd=data.frame(Fecha=COVID.IRAN$Date[179:208], Infectados=round(fore.mlp$mean,3))\nDT::datatable(d, style = 'bootstrap4')\n```\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n```{r, echo=FALSE}\n#| label: tbl-treintapdf\n#| tbl-cap: \"Pronóstico de casos confirmados de COVID-19 en Irán en los próximos 30 días.\"\n#|\nd=data.frame(Fecha=COVID.IRAN$Date[179:208], Infectados=round(fore.mlp$mean,3))\nd\n```\n:::\n:::\n\n### Implementación en Python\n\n::: {style=\"text-align: justify\"}\nEn esta sección, se realizaron ajustes en el método para su implementación. Cada día proyectado se forma utilizando el dato del día anterior. En cada paso, se actualiza la secuencia de entrada eliminando el valor más antiguo e incorporando la predicción más reciente como el dato más reciente. Esta dinámica se representa esquemáticamente a continuación, donde $n$ representa la extensión de la secuencia de entrada y $T$ es la longitud de la serie temporal.\n\n$$\n\\begin{split}\ny:\\text{Observado}\\quad &\\quad \\hat{y}:\\text{Pronosticado}\\\\\ny_{T-n+1}\\quad y_{T-n+2}\\quad y_{T-n+3}\\quad&\\cdots\\quad y_{T-2}\\quad y_{T-1}\\quad y_T\\quad \\to\\quad \\hat{y}_{T+1}\\\\\ny_{T-n+2}\\quad y_{T-n+3}\\quad y_{T-n+4}\\quad&\\cdots\\quad y_{T-1}\\quad y_{T}\\quad \\hat{y}_{T+1}\\quad \\to\\quad \\hat{y}_{T+2}\\\\\ny_{T-n+3}\\quad y_{T-n+4}\\quad y_{T-n+5}\\quad&\\cdots\\quad y_{T}\\quad \\hat{y}_{T+1}\\quad \\hat{y}_{T+2}\\quad \\to\\quad \\hat{y}_{T+3}\\\\\n&\\ddots\\\\\n\\end{split}\n$$\n\nSe exhibe a continuación el código utilizado y el gráfico correspondiente al pronóstico generado por la red neuronal.\n:::\n\n::: {.content-visible when-format=\"html\"}\n::: {.callout-caution collapse=\"true\" icon=\"false\"}\n## ▸ Código\n\n``` python\nimport numpy as np\nimport pandas as pd\nimport yfinance as yf\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom tensorflow.keras.layers import Dense, LSTM\nfrom tensorflow.keras.models import Sequential\nfrom sklearn.preprocessing import MinMaxScaler\n\npd.options.mode.chained_assignment = None\ntf.random.set_seed(0)\ndf = pd.read_excel('Data.xlsx')\n\n# ------------- Entrenamiento y prueba del modelo --------------\ny = df['Confirmed'].fillna(method='ffill')\ny = y.values.reshape(-1, 1)\n# scale the data\nscaler = MinMaxScaler(feature_range=(0, 1))\nscaler = scaler.fit(y)\ny = scaler.transform(y)\n\n# generate the input and output sequences\nn_lookback = 53  # length of input sequences (lookback period)\nn_forecast = 30  # length of output sequences (forecast period)\n\nX = []\nY = []\n\nfor i in range(n_lookback, len(y) - n_forecast + 1):\n    X.append(y[i - n_lookback: i])\n    Y.append(y[i: i + n_forecast])\n\nX = np.array(X)\nY = np.array(Y)\n\n# fit the model\nmodel = Sequential()\nmodel.add(Dense(20, activation='sigmoid', input_dim=n_lookback))\nmodel.add(Dense(n_forecast))\n\nmodel.compile(loss='mean_squared_error', optimizer='adam')\nmodel.fit(X, Y, epochs=20, batch_size=4, verbose=0)\n\n# generate the forecasts\nX_ = y[- n_lookback:]  # last available input sequence\nX_ = X_.reshape(1, n_lookback, 1)\n\nY_ = model.predict(X_).reshape(-1, 1)\nY_ = scaler.inverse_transform(Y_)\n\n# organize the results in a data frame\ndf_past = df\ndf_past.rename(columns={'Date':'Date','Confirmed':'Actual'},inplace=True)\ndf_past['Date'] = pd.to_datetime(df_past['Date'])\ndf_past['Forecast'] = np.nan\ndf_past['Forecast'].iloc[-1] = df_past['Actual'].iloc[-1]\n\ndf_future = pd.DataFrame(columns=['Date', 'Actual', 'Forecast'])\ndf_future['Date'] = pd.date_range(\n  start=df_past['Date'].iloc[-1] + pd.Timedelta(days=1), \n  periods=n_forecast)\ndf_future['Forecast'] = Y_.flatten()\ndf_future['Actual'] = np.nan\n\nresults = df_past._append(df_future).set_index('Date')\n# Calculate minimum, median, and maximum for each forecasted date\nresults['Min'] = results['Forecast'].rolling(window=2).min()\nresults['Max'] = results['Forecast'].rolling(window=2).max()\nresults['Median'] = results['Forecast'].rolling(window=2).median()\n\n# Creamos la gráfica con las predicciones\n#fig = px.line(results, x=results.index, y=['Actual','Forecast', 'Median'],\nfig = px.line(results, x=results.index, y=['Actual', 'Median'],\n              labels={'index': 'Date', 'value': 'Confirmed Cases'},\n              title='Casos Confirmados',\n              line_shape='linear')\n\nfig.update_traces(line=dict(color='cornflowerblue'), \nselector=dict(name='Actual'))\nfig.update_traces(line=dict(color='orange'), \nselector=dict(name='Forecast'))\nfig.update_traces(line=dict(color='mediumvioletred'), \nselector=dict(name='Median'))\n\n# Agregar gráficos de área para el mínimo y el máximo\nfig.add_trace(\n    go.Scatter(x=results.index, \n    y=results['Min'], \n    fill=None, mode='lines', \n    line=dict(color='hotpink'), \n    name='Min'))\nfig.add_trace(\n    go.Scatter(x=results.index, \n    y=results['Max'], \n    fill='tonexty', \n    mode='lines', \n    line=dict(color='deeppink'), \n    name='Max'))\nfig.show('')\n```\n:::\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n``` python\nimport numpy as np\nimport pandas as pd\nimport yfinance as yf\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom tensorflow.keras.layers import Dense, LSTM\nfrom tensorflow.keras.models import Sequential\nfrom sklearn.preprocessing import MinMaxScaler\n\npd.options.mode.chained_assignment = None\ntf.random.set_seed(0)\ndf = pd.read_excel('Data.xlsx')\n\n# ------------- Entrenamiento y prueba del modelo --------------\ny = df['Confirmed'].fillna(method='ffill')\ny = y.values.reshape(-1, 1)\n# scale the data\nscaler = MinMaxScaler(feature_range=(0, 1))\nscaler = scaler.fit(y)\ny = scaler.transform(y)\n\n# generate the input and output sequences\nn_lookback = 53  # length of input sequences (lookback period)\nn_forecast = 30  # length of output sequences (forecast period)\n\nX = []\nY = []\n\nfor i in range(n_lookback, len(y) - n_forecast + 1):\n    X.append(y[i - n_lookback: i])\n    Y.append(y[i: i + n_forecast])\n\nX = np.array(X)\nY = np.array(Y)\n\n# fit the model\nmodel = Sequential()\nmodel.add(Dense(20, activation='sigmoid', input_dim=n_lookback))\nmodel.add(Dense(n_forecast))\n\nmodel.compile(loss='mean_squared_error', optimizer='adam')\nmodel.fit(X, Y, epochs=20, batch_size=4, verbose=0)\n\n# generate the forecasts\nX_ = y[- n_lookback:]  # last available input sequence\nX_ = X_.reshape(1, n_lookback, 1)\n\nY_ = model.predict(X_).reshape(-1, 1)\nY_ = scaler.inverse_transform(Y_)\n\n# organize the results in a data frame\ndf_past = df\ndf_past.rename(columns={'Date': 'Date', 'Confirmed': 'Actual'}, inplace=True)\ndf_past['Date'] = pd.to_datetime(df_past['Date'])\ndf_past['Forecast'] = np.nan\ndf_past['Forecast'].iloc[-1] = df_past['Actual'].iloc[-1]\n\ndf_future = pd.DataFrame(columns=['Date', 'Actual', 'Forecast'])\ndf_future['Date'] = pd.date_range(\n  start=df_past['Date'].iloc[-1] + pd.Timedelta(days=1), \n  periods=n_forecast)\ndf_future['Forecast'] = Y_.flatten()\ndf_future['Actual'] = np.nan\n\nresults = df_past._append(df_future).set_index('Date')\n# Calculate minimum, median, and maximum for each forecasted date\nresults['Min'] = results['Forecast'].rolling(window=2).min()\nresults['Max'] = results['Forecast'].rolling(window=2).max()\nresults['Median'] = results['Forecast'].rolling(window=2).median()\n\n# Creamos la gráfica con las predicciones\n#fig = px.line(results, x=results.index, y=['Actual','Forecast', 'Median'],\nfig = px.line(results, x=results.index, y=['Actual', 'Median'],\n              labels={'index': 'Date', 'value': 'Confirmed Cases'},\n              title='Casos Confirmados',\n              line_shape='linear')\n\nfig.update_traces(line=dict(color='cornflowerblue'), \nselector=dict(name='Actual'))\nfig.update_traces(line=dict(color='orange'), \nselector=dict(name='Forecast'))\nfig.update_traces(line=dict(color='mediumvioletred'), \nselector=dict(name='Median'))\n\n# Agregar gráficos de área para el mínimo y el máximo\nfig.add_trace(\n    go.Scatter(x=results.index, \n    y=results['Min'], \n    fill=None, mode='lines', \n    line=dict(color='hotpink'), \n    name='Min'))\nfig.add_trace(\n    go.Scatter(x=results.index, \n    y=results['Max'], \n    fill='tonexty', \n    mode='lines', \n    line=dict(color='deeppink'), \n    name='Max'))\nfig.show('')\n```\n:::\n\n::: {.content-visible when-format=\"html\"}\n```{python, eval=knitr::is_html_output()}\n#| output: false\n#| include: false\nimport numpy as np\nimport pandas as pd\nimport yfinance as yf\nfrom silence_tensorflow import silence_tensorflow\nsilence_tensorflow()\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\nimport plotly.io as pio\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom tensorflow.keras.layers import Dense, LSTM\nfrom tensorflow.keras.models import Sequential\nfrom sklearn.preprocessing import MinMaxScaler\npd.options.mode.chained_assignment = None\ntf.random.set_seed(0) \ndf = pd.read_excel('Data.xlsx')\n# ------------- Entrenamiento y prueba del modelo --------------\ny = df['Confirmed'].fillna(method='ffill')\ny = y.values.reshape(-1, 1)\n# scale the data\nscaler = MinMaxScaler(feature_range=(0, 1))\nscaler = scaler.fit(y)\ny = scaler.transform(y)\n\n# generate the input and output sequences\nn_lookback = 53  # length of input sequences (lookback period)\nn_forecast = 30  # length of output sequences (forecast period)\n\nX = []\nY = []\n\nfor i in range(n_lookback, len(y) - n_forecast + 1):\n    X.append(y[i - n_lookback: i])\n    Y.append(y[i: i + n_forecast])\n\nX = np.array(X)\nY = np.array(Y)\n\n# fit the model\nmodel = Sequential()\nmodel.add(Dense(20, activation='sigmoid', input_dim=n_lookback))\nmodel.add(Dense(n_forecast))\n\nmodel.compile(loss='mean_squared_error', optimizer='adam')\nmodel.fit(X, Y, epochs=20, batch_size=4, verbose=0)\n\n# generate the forecasts\nX_ = y[- n_lookback:]  # last available input sequence\nX_ = X_.reshape(1, n_lookback, 1)\n\nY_ = model.predict(X_).reshape(-1, 1)\nY_ = scaler.inverse_transform(Y_)\n\n# organize the results in a data frame\ndf_past = df\ndf_past.rename(columns={'Date': 'Date', 'Confirmed': 'Actual'}, inplace=True)\ndf_past['Date'] = pd.to_datetime(df_past['Date'])\ndf_past['Forecast'] = np.nan\ndf_past['Forecast'].iloc[-1] = df_past['Actual'].iloc[-1]\n\ndf_future = pd.DataFrame(columns=['Date', 'Actual', 'Forecast'])\ndf_future['Date'] = pd.date_range(\n  start=df_past['Date'].iloc[-1] + pd.Timedelta(days=1), \n  periods=n_forecast)\ndf_future['Forecast'] = Y_.flatten()\ndf_future['Actual'] = np.nan\n\nresults = df_past._append(df_future).set_index('Date')\n# Calculate minimum, median, and maximum for each forecasted date\nresults['Min'] = results['Forecast'].rolling(window=2).min()\nresults['Max'] = results['Forecast'].rolling(window=2).max()\nresults['Median'] = results['Forecast'].rolling(window=2).median()\n\n# Creamos la gráfica con las predicciones\n#fig = px.line(results, x=results.index, y=['Actual','Forecast', 'Median'],\nfig = px.line(results, x=results.index, y=['Actual', 'Median'],\n              labels={'index': 'Date', 'value': 'Confirmed Cases'},\n              title='Casos Confirmados',\n              line_shape='linear')\n\nfig.update_traces(line=dict(color='cornflowerblue'), \n                  selector=dict(name='Actual'))\nfig.update_traces(line=dict(color='orange'), \n                  selector=dict(name='Forecast'))\nfig.update_traces(line=dict(color='mediumvioletred'), \n                  selector=dict(name='Median'))\n\n# Agregar gráficos de área para el mínimo y el máximo\nfig.add_trace(\n    go.Scatter(x=results.index, \n               y=results['Min'], \n               fill=None, mode='lines', \n               line=dict(color='hotpink'), \n               name='Min'))\nfig.add_trace(\n    go.Scatter(x=results.index, \n               y=results['Max'], \n               fill='tonexty', \n               mode='lines', \n               line=dict(color='deeppink'), \n               name='Max'))\n```\n:::\n\n::: {.content-visible when-format=\"html\"}\n```{python, eval=knitr::is_html_output()}\n#| label: fig-mlp\n#| fig-cap: 'Pronóstico de casos confirmados de COVID-19 en Irán en los próximos 30 días (implementación en python.)'\n#| echo: false\nfig.show('')\n```\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n![Pronostico de casos confirmados de COVID-19 en Irán (implementación en Python).](Imagenes/Confirmados.png){#fig-mlp1 fig-align=\"center\"}\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n::: {style=\"text-align: justify\"}\nLos resultados del pronóstico en @fig-mlp1 indican que, el 14 de Septiembre de 2020, se proyectan aproximadamente 2476 nuevos casos confirmados de COVID-19.\n:::\n:::\n\n::: {.content-visible when-format=\"html\"}\n::: {style=\"text-align: justify\"}\nLos resultados del pronóstico en @fig-mlp indican que, el 14 de Septiembre de 2020, se proyectan aproximadamente 2476 nuevos casos confirmados de COVID-19.\n:::\n:::\n","srcMarkdownNoYaml":"\n\n# Pronóstico de infectados diarios\n\n```{r, echo=FALSE, message=FALSE, warning=FALSE}\nlibrary(zoo,warn.conflicts=FALSE)\nlibrary(lubridate,warn.conflicts=FALSE)\nlibrary(mgcv,warn.conflicts=FALSE)\nlibrary(rugarch,warn.conflicts=FALSE)\n# visualization\nsuppressPackageStartupMessages(library(ggplot2))\n# getting financial data\nsuppressPackageStartupMessages(library(quantmod))\n# calculating returns\nsuppressPackageStartupMessages(library(PerformanceAnalytics))\n# GARCH modeling\nsuppressPackageStartupMessages(library(rugarch))\n# ARCH test\nsuppressPackageStartupMessages(library(FinTS))\n# ARMA modeling\nsuppressPackageStartupMessages(library(forecast))\n# structural changes\nsuppressPackageStartupMessages(library(strucchange))\n# ARMA order identification\nsuppressPackageStartupMessages(library(TSA))\nlibrary(tseries)\nlibrary(timeSeries)\nlibrary(tswge)\nlibrary(xts)\nlibrary(pastecs)\nlibrary(tidyr)\nlibrary(dplyr)\nlibrary(dygraphs)\nlibrary(splines)\nlibrary(kableExtra)\nlibrary(conflicted)\nlibrary(goeveg)\nlibrary(tidyverse)\nrm(list=ls())\nlibrary(FinTS)\nlibrary(rugarch)\nlibrary(tseries)\nlibrary(dynlm)\nlibrary(vars)\nlibrary(nlWaldTest)\nlibrary(broom)\nlibrary(readxl)\nlibrary(plotly)\nlibrary(nnfor)\nlibrary(neuralnet)\n```\n\n## Obtención de datos\n\n::: {style=\"text-align: justify\"}\nConforme se ha referido previamente, se emplea el conjunto de datos global informado diariamente, disponible para su descarga en <https://covid19.who.int/WHO-COVID-19-global-data.csv.> Resulta relevante destacar que la base de datos consultada corresponde al 16 de Enero del 2023, restringiéndose a los datos concernientes exclusivamente a los casos confirmados en Irán entre el 20 de febrero y el 15 de agosto de 2020.\n\nEl análisis posterior se ha llevado a cabo empleando el software R versión 4.3.2. Con el propósito de realizar el análisis de los datos y la generación de gráficos, se procedió a convertir los datos al formato *ts*, lo que permitió su representación como una serie temporal.\n:::\n\n```{r, echo=FALSE}\n# Importamos la base de datos total\nCOVID.19.global.data <- read.csv(\"WHO-COVID-19-global-data.csv\")\n#Dataframe de los casos confirmados en Irán\nCOVID.IRAN <- data.frame(Date=COVID.19.global.data$Date_reported[108535:108742],\n                         Confirmed=COVID.19.global.data$New_cases[108535:108742])\n#Dataframe de los casos confirmados en Irán del 20-02-2020 al 15-08-2020\nConfirmed_df <- data.frame(COVID.IRAN[1:178,])\n#Ponemos las fechas en formato 'Date'\nConfirmed_df$Date <- as.Date(Confirmed_df$Date)\n```\n\n```{r}\n# Se crea un objeto 'Date' diario\ninds <- seq(as.Date(\"2020-02-20\"), as.Date(\"2020-08-15\"), by = \"day\")\n# Se crea un objeto 'serie de tiempo' de frecuencia diaria\nConfirmed_ts <- ts(Confirmed_df[2], \n                   start = c(2020, as.numeric(format(inds[1], \"%j\"))),\n                   frequency = 365)\n```\n\n::: {.content-visible when-format=\"pdf\"}\n```{r, echo=FALSE}\n#| label: fig-oripdf\n#| fig-cap: \"Serie de tiempo de los casos de COVID-19 confirmados en Irán del 20-02-2020 al 15-08-2020.\"\nplot(Confirmed_ts)\n```\n:::\n\n::: {.content-visible when-format=\"html\"}\n::: {#fig-ori}\n```{r, warning=FALSE, message=FALSE, echo=FALSE}\nfig <- plot_ly(Confirmed_df, type = 'scatter', mode = 'lines')%>%\n  add_trace(x = ~Date, y = ~Confirmed)%>%\n  plotly::layout(showlegend = F)\nfig <- fig %>%\n  plotly::layout(\n         xaxis = list(zerolinecolor = '#ffff',\n                      zerolinewidth = 2,\n                      gridcolor = 'ffff'),\n         yaxis = list(zerolinecolor = '#ffff',\n                      zerolinewidth = 2,\n                      gridcolor = 'ffff'),\n         plot_bgcolor='#e5ecf6')\n\nfig\n```\n\nSerie de tiempo de los casos de COVID-19 confirmados en Irán del 20-02-2020 al 15-08-2020.\n:::\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n::: {style=\"text-align: justify\"}\nLa gráfica de la @fig-oripdf exhibe la serie temporal derivada de la base de datos, en la cual se evidencia la ausencia de información para los días 27 y 29 de Febrero, así como para el 02 de Marzo y el 05 de Abril de 2020. Para subsanar esta carencia de datos, se llevó a cabo una interpolación promedio a fin de sustituir los valores faltantes. La @fig-tspdf muestra la serie de tiempo resultante de estas correcciones.\n:::\n:::\n\n::: {.content-visible when-format=\"html\" style=\"text-align: justify\"}\nLa gráfica de la @fig-ori exhibe la serie temporal derivada de la base de datos, en la cual se evidencia la ausencia de información para los días 27 y 29 de Febrero, así como para el 02 de Marzo y el 05 de Abril de 2020. Para subsanar esta carencia de datos, se llevó a cabo una interpolación promedio a fin de sustituir los valores faltantes. La @tbl-datatable muestra la base de datos con las modificaciones efectuadas, así como la serie de tiempo (@fig-ts) resultante de estas correcciones.\n:::\n\n```{r, echo=FALSE}\n#Función para eliminar los ceros (por interpolación promedio)\nfor (i in 2:length(Confirmed_df$Date)-1) {\n  if (Confirmed_df$Confirmed[i]==0) {\n    Confirmed_df$Confirmed[i] <- (Confirmed_df$Confirmed[i-1]+ \n    Confirmed_df$Confirmed[i+1])/2}}\nConfirmed_ts <- ts(Confirmed_df[2], \n                   start = c(2020, as.numeric(format(inds[1], \"%j\"))),\n                   frequency = 365)\n```\n\n::: {.content-visible when-format=\"html\"}\n```{r, echo=FALSE}\n#| label: tbl-datatable\n#| tbl-cap: \"Casos confirmados ajustados del 20-02-2020 al 15-08-2020.\"\nlibrary(DT)\ndatatable(Confirmed_df, style = 'bootstrap4')\n```\n:::\n\n::: {.content-visible when-format=\"html\"}\n::: {#fig-ts}\n```{r, warning=FALSE, message=FALSE, echo=FALSE}\nfig <- plot_ly(Confirmed_df, type = 'scatter', mode = 'lines')%>%\n  add_trace(x = ~Date, y = ~Confirmed)%>%\n  plotly::layout(showlegend = F)\nfig <- fig %>%\n  plotly::layout(\n         xaxis = list(zerolinecolor = '#ffff',\n                      zerolinewidth = 2,\n                      gridcolor = 'ffff'),\n         yaxis = list(zerolinecolor = '#ffff',\n                      zerolinewidth = 2,\n                      gridcolor = 'ffff'),\n         plot_bgcolor='#e5ecf6')\n\nfig\n```\n\nSerie de tiempo de los casos de COVID-19 confirmados en Irán del 20-02-2020 al 15-08-2020\n:::\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n```{r, echo=FALSE}\n#| label: fig-tspdf\n#| fig-cap: \"Serie de tiempo de los casos de COVID-19 confirmados en Irán del 20-02-2020 al 15-08-2020.\"\nplot(Confirmed_ts)\n```\n:::\n\n## Análisis de la serie de tiempo de casos confirmados de COVID-19 en Irán\n\n### Estadística descriptiva\n\n::: {style=\"text-align: justify\"}\nCon el propósito de llevar a cabo una auditoría de los datos y al mismo tiempo una descripción preliminar, se ejecuta un estudio de estadística descriptiva que arroja los resultados correspondientes, incluyendo un gráfico Boxplot (@fig-box) para representar la información o\n:::\n\n```{r, echo=FALSE}\nsummary(Confirmed_df$Confirmed)\n```\n\n::: {#fig-box}\n```{r, echo=FALSE}\nlibrary(plotly)\nfig <- plot_ly(Confirmed_df, y = ~Confirmed, type = 'box')\nfig\n```\n\nBoxplot de casos confirmados de COVID-19 en Irán del 20-02-2020 al 15-08-2020.\n:::\n\n### Componentes de la serie de tiempo\n\n::: {style=\"text-align: justify\"}\nLos componentes identificados en la serie de tiempo de casos confirmados de COVID-19 en Irán, revelan distintos patrones y características.\n\nEn primer lugar, se observa una tendencia discernible en el gráfico de la serie temporal (@fig-ts). Por ejemplo, entre el 30 de marzo y el 03 de mayo de 2020, se evidencia una tendencia negativa o decreciente, seguida por una tendencia creciente a partir del 03 de mayo en adelante. Estos cambios en la tendencia podrían indicar fluctuaciones significativas en la evolución de los casos confirmados durante esos periodos específicos.\n\nEn cuanto a la estacionalidad, aunque no se identifica claramente a simple vista en el periodo observado, la extensión del análisis a un periodo más amplio podría revelar patrones recurrentes o ciclos temporales característicos. Es posible que ciertos patrones estacionales se manifiesten en intervalos más extensos de la serie temporal, lo que implicaría variaciones sistemáticas y repetitivas en los datos en períodos específicos.\n\nPor último, se destacan pequeñas subidas y bajadas en el gráfico que sugieren la presencia de **ruido** en la serie temporal. Estas fluctuaciones irregulares podrían atribuirse a diversas causas, como posibles errores en la recolección de datos o fluctuaciones aleatorias inherentes al comportamiento de la enfermedad. Es importante considerar estas variaciones no sistemáticas al analizar la serie temporal, ya que podrían influir en la interpretación de los patrones y tendencias observadas.\n:::\n\n### Estacionariedad\n\n::: {style=\"text-align: justify\"}\nA continuación, se emplea el test de Dickey-Fuller para examinar la presencia de estacionariedad en la serie temporal. Este test fue utilizado con la finalidad de identificar la existencia de raíces unitarias en la serie, lo cual permite inferir la presencia o ausencia de estacionariedad en los datos analizados.\n:::\n\n```{r}\nadf.test(Confirmed_ts, alternative = \"stationary\")\n```\n\n::: {style=\"text-align: justify\"}\nLa hipótesis nula $(H_0)$ asume la presencia de raíces unitarias, lo que indica no estacionariedad en la serie. Al obtener un $p-$valor superior al nivel de significancia establecido el cuál es del $95\\%$, no se rechaza la hipótesis nula, sugiriendo la ausencia de estacionariedad en la serie de tiempo de casos confirmados.\n\nAdemás, se complementa la evaluación de la estacionalidad mediante la inspección de los gráficos de la función de autocorrelación (ACF) y la función de autocorrelación parcial (PACF). Estos gráficos se utilizan para identificar patrones de autocorrelación en la serie temporal, lo que permite visualizar la presencia de estacionalidad, tendencias o ciclos.\n:::\n\n::: {style=\"text-align: justify\"}\nLa serie de tiempo representada en la @fig-ts exhibe un comportamiento característico de deambulación aleatoria. Dado que el valor de la variable $X_{t+1}$ generalmente se encuentra en proximidad al valor $X_t$, se evidencia una autocorrelación positiva notablemente marcada entre las variables $X_t$ y $X_{t+1}$.\n\n::: {#fig-acf}\n```{r,warning=FALSE, message=FALSE}\nautoplot(acf(Confirmed_ts, plot = FALSE), \n         main=\"Autocorrelograma de casos confirmados.\")\n```\n\nAutocorrelograma de los casos confirmados de COVID-19 en Irán\n:::\n\nEn la @fig-acf se observa que la autocorrelación (vea la ecuación ([-@eq-autocorr])) entre $X_t$ y $X_{t+k}$ decrece con el incremento del retraso $k$. Este declive conduce a la constatación de que, a un desfase de $20$, existe una correlación bastante débil entre $X_t$ y $X_{t+20}$. Al analizar el gráfico de la función de autocorrelación (ACF), se aprecia que $\\rho_{20}\\approx 0.19$.\n\nLa gráfica de la Función de Autocorrelación Parcial (PACF) proporciona información valiosa sobre la estructura de autocorrelación de una serie temporal una vez han sido eliminadas las correlaciones debidas a los intervalos de tiempo intermedios.\n\n::: {#fig-pacf}\n```{r,warning=FALSE, message=FALSE}\nggPacf((Confirmed_ts), main = 'Autocorrelograma parcial de casos confirmados.')\n```\n\nAutocorrelograma Parcial de los casos confirmados de COVID-19 en Irán\n:::\n\nConsiderando que los datos se ajustan a un modelo de series de tiempo, la @fig-pacf indica que el valor de correlación $\\phi_{15}$ es ligeramente superior a $0.25$, aproximadamente $\\phi_{52}\\approx 0.16$, y $\\phi_{76}\\approx 0.15$, mientras que para los restantes valores, la correlación parcial no es nula.\n\n::: remark\nDe acuerdo con la gráfica de la Función de Autocorrelación Parcial @fig-pacf, se observa un corte abrupto después del rezago 4, lo cual sugiere que las autocorrelaciones parciales más allá de ese punto no poseen significancia estadística. Por consiguiente, se infiere la posibilidad de ajustar un modelo autoregresivo AR(4) a la base de datos.\n\n```{r, warning=FALSE, message=FALSE}\nlibrary(tswge)\ncoeff <- est.ar.wge(Confirmed_ts, p=4)\ncoeff$phi #coeficientes\ncoeff$xbar #media\ncoeff$avar #varianza finita\n```\n\nEl modelo autoregresivo AR(4) se expresa mediante la siguiente ecuación:\n\n$$\n(1-0.865B-0.172B^2-0.059B^3+0.131B^4)(X_t-1922.868)+a_t,\n$$ {#eq-AR4}\n\ndonde $\\hat{\\sigma}_a^2 = 47818.04$.\n:::\n:::\n\n::: {style=\"text-align: justify\"}\nEl análisis del ACF y PACF proporcionó información sobre la relación de los puntos de datos con sus rezagos, permitiendo observar posibles patrones estacionales. La presencia de picos significativos en estos gráficos podría indicar la existencia de estacionalidad en la serie de tiempo.\n:::\n\n## Entrenamiento, modelado, pronóstico y métricas de rendimiento\n\n::: {style=\"text-align: justify\"}\nSe procede a la evaluación del rendimiento de métodos destinados al ajuste y consecuente pronóstico. Específicamente, se contempla el método de suavizamiento exponencial de Holt-Winters y el ajuste mediante un modelo de red neuronal del tipo perceptrón multicapa. Ambos procedimientos requieren la subdivisión de los datos en conjuntos destinados a entrenamiento y prueba. El set inicial, compuesto por el $70\\%$ de los datos, se emplea para el entrenamiento de los modelos, mientras que el $30\\%$ restante se reservará para llevar a cabo las pruebas pertinentes.\n:::\n\n```{r}\nConfirmed_ts <- ts(Confirmed_ts,frequency=1)\ntsize <- round(0.7 * nrow(Confirmed_df))\ntrain_confirmed <- window(Confirmed_ts,end=tsize)\ntest_confirmed <- window(Confirmed_ts,start=tsize+1)\n```\n\n### Holt-Winters {#sec-holt-winters}\n\n::: {style=\"text-align: justify\"}\nCon el fin de determinar la descomposición más adecuada para los datos en cuestión, se empleó un criterio elaborado basado en el coeficiente de variación, el cual proporciona una recomendación entre las dos versiones disponibles.\n\n```{r}\nDescRec <- function(x){\n  n = length(x)\n  di = rep(0, n-1)\n  ci = rep(0, n-1)\n  for (i in 1:n-1) {\n    di[i] = x[i+1] - x[i]\n    ci[i] = x[i+1] / x[i]\n  }\n  d <- cv(di) \n  c <- cv(ci) / mean(di)\n  if(d < c)\n    print(\"Se recomienda la descomposición aditiva\")\n  else\n    print(\"Se recomienda la descomposición multiplicativa\")\n}\nDescRec(train_confirmed)\n```\n\nDe acuerdo con la recomendación observada, se sugiere la utilización de la versión multiplicativa (vea la ecuación ([-@eq-muldecom])). En consecuencia, se procede a mostrar la representación gráfica de la descomposición multiplicativa de la serie temporal.\n\n::: {#fig-descomp}\n```{r}\nts_train <- ts(train_confirmed, frequency = 2)\ncomponents_ts <- decompose(ts_train, type = 'mult')\nplot(components_ts)\n```\n\nDescomposición multiplicativa de la serie de tiempo.\n:::\n\nSe procede ahora a la aplicación del modelo multiplicativo de Holt-Winters a la serie temporal de los datos de entrenamiento utilizando una frecuencia de dos, con el fin de permitir la aplicabilidad del modelo.\n:::\n\n```{r}\nHWc <- HoltWinters(ts_train, seasonal = 'mult')\nHWc\n```\n\n::: {style=\"text-align: justify\"}\nFinalmente, utilizando el modelo de entrenamiento desarrollado en la fase previa, se lleva a cabo la proyección con un horizonte de predicción igual en extensión a los datos de prueba, acompañado de un intervalo de confianza que oscila entre el $80\\%$ y el $95\\%$.\n:::\n\n```{r}\nHWc_for <- forecast(HWc, h=length(test_confirmed))\n```\n\n::: {.callout-note style=\"text-align: justify\"}\nLas funciones aplicadas en esta sección son parte de la librería ***stats*** @stats de R.\n:::\n\n### MLP\n\n::: {style=\"text-align: justify\"}\nPosteriormente, se procede al entrenamiento del modelo MLP (Perceptrón Multicapa). La cantidad de capas ocultas y la configuración de nodos en cada capa se determinaron de manera automatizada mediante el método de [validación cruzada de 5 pliegues](redes.qmd#sec-validación-cruzada-de-k-pliegues). Asimismo, se eligió la función de activación como sigmoide, y el proceso de entrenamiento del modelo se ejecutó a lo largo de 20 iteraciones.\n:::\n\n```{r}\nfitc <- mlp(train_confirmed, hd.auto.type=\"cv\", reps=20, comb='median')\nfitc\n```\n\n::: {#fig-red}\n```{r}\nplot(fitc)\n```\n\nEstructura de la red neuronal resultante.\n:::\n\n::: {style=\"text-align: justify\"}\nPara llevar a cabo el pronóstico, se emplea el modelo de entrenamiento creado en la etapa anterior, manteniendo un horizonte de predicción que coincide en duración con los datos de prueba, tal como se hizo con la técnica anterior.\n:::\n\n```{r}\nfrcc <- forecast(fitc,h=length(test_confirmed))\n```\n\n::: {.callout-note style=\"text-align: justify\"}\nLas funciones aplicadas en esta sección son parte de la librería ***nnfor*** @nnfor de R.\n:::\n\n### Comparación de pronósticos con el conjunto de datos de prueba\n\n::: {style=\"text-align: justify\"}\nCon el propósito de llevar a cabo un análisis cuantitativo exhaustivo, se presenta a continuación una tabla comparativa de los resultados derivados de las dos técnicas implementadas y la base de datos de prueba. Posteriormente, se exhiben gráficas representativas de estos resultados. En la @fig-phw se muestra el pronóstico mediante Holt-Winters acompañado de su respectivo intervalo de confianza. En contraste, en la @fig-pmlp, la gráfica punteada en color rojo representa el comportamiento real de los datos, mientras que en azul se representa el pronóstico obtenido a través de la red MLP.\n:::\n\n::: {.content-visible when-format=\"html\"}\n```{r,echo=FALSE}\n#| label: tbl-forecast\n#| tbl-cap: \"Comparación de Resultados entre las técnicas y los datos reales para evaluar precisión.\"\ncfor <- data.frame(Date=Confirmed_df$Date[126:178], Real= test_confirmed,\n                   Forecast_HW=HWc_for$mean,Forecast_MLP=frcc$mean)\nDT::datatable(cfor, style = 'bootstrap4')\n```\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n```{r, echo=FALSE}\n#| label: tbl-forecastpdf\n#| tbl-cap: \"Comparación de Resultados entre las técnicas y los datos reales para evaluar precisión\"\ncfor\n```\n:::\n\n::: {#fig-phw}\n```{r, echo=FALSE, size=1500}\nplot(HWc_for,type='l',main=\"Forcasts from HW\",ylab=\"Confirmed\",xlab= \"Date: from Feb. 20, 2020, to Aug. 15, 2020\")\nlines(test_confirmed,lty=5, col='red')\n```\n\nPronóstico obtenido mediante la técnica de Holt-Winters.\n:::\n\n::: {#fig-pmlp}\n```{r,echo=FALSE}\nplot(frcc,main=\"Forcasts from MLP\",ylab=\"Confirmed\",xlab= \"Date: from Feb. 20, 2020, to Aug. 15, 2020\", col='blue')\nlines(test_confirmed,lty=5, col='red')\n```\n\nPronóstico obtenido mediante la red neuronal MLP.\n:::\n\n#### Métricas de rendimiento\n\n::: {style=\"text-align: justify\"}\nPara evaluar la calidad o bondad de ajuste de los métodos utilizados en este estudio y seleccionar el modelo más apropiado, se aplican tres métricas de rendimiento, Error Cuadrático Medio ([-@eq-RMSE]), Error Absoluto Medio ([-@eq-MAE]) y Error Porcentual Absoluto Medio ([-@eq-MAPE]) tanto en las fases de entrenamiento como en las de prueba. Los resultados correspondientes a éstas métricas se presentan en la @tbl-err .\n\n```{r,echo=FALSE,attr.output='style=\"max-height:100px;\"'}\n##### Training and Testing Errores #####\nHW_train = generics::accuracy(train_confirmed[3:125], HWc_for$fitted[3:125])[1,1:5]\nHW_test = generics::accuracy(cfor$Confirmed, cfor$Forecast_HW)[1,1:5]\nMLP_train = generics::accuracy(train_confirmed[5:125], frcc$fitted)[1,1:5]\nMLP_test = generics::accuracy(cfor$Confirmed, cfor$Forecast_MLP)[1,1:5]\nTraining_Data <- data.frame(\n  RMSE = c(HW_train[2], MLP_train[2]),\n  MAE = c(HW_train[3], MLP_train[3]),\n  MAPE = c(HW_train[5], MLP_train[5]),\n  row.names = c(\"Holt-Winters\", \"MLP\")\n)\nTesting_Data <- data.frame(\n  RMSE = c(HW_test[2], MLP_test[2]),\n  MAE = c(HW_test[3], MLP_test[3]),\n  MAPE = c(HW_test[5], MLP_test[5]),\n  row.names = c(\"Holt-Winters\", \"MLP\")\n)\nConfirmed_Cases <- data.frame(Trainig = Training_Data, Testing =Testing_Data)\n#Confirmed_Cases\n```\n\n|                  |            |                |           |            |               |          |\n|-----------|:---------:|:---------:|:---------:|:---------:|:---------:|:---------:|\n|                  |            | ***Training*** |           |            | ***Testing*** |          |\n|                  |  **RMSE**  |    **MAE**     | **MAPE**  |  **RMSE**  |    **MAE**    | **MAPE** |\n| **Holt-Winters** | *262.9925* |   *190.0482*   | *20.8415* | *234.0094* |  *165.8208*   | *6.2967* |\n| **MLP**          | *239.3483* |   *180.9937*   | *14.6079* | *177.0605* |  *136.4799*   | *5.4441* |\n\n: Errores de los modelos para casos confirmados. {#tbl-err}\n:::\n\n### Conclusión\n\n::: {.content-visible when-format=\"html\"}\n::: {style=\"text-align: justify\"}\nBasándose en los resultados extraídos tanto de la tabla de pronósticos (@tbl-forecast) como de la tabla de errores (@tbl-err), se llega a la conclusión de que, para esta base de datos en particular, la técnica de redes neuronales MLP demuestra ser más efectiva en la predicción realizada. Esto se fundamenta en la evidencia de un menor error registrado en las tres métricas calculadas, tanto durante la fase de entrenamiento como en la fase de prueba.\n:::\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n::: {style=\"text-align: justify\"}\nBasándose en los resultados extraídos tanto de la tabla de pronósticos (@tbl-forecastpdf) como de la tabla de errores (@tbl-err), se llega a la conclusión de que, para esta base de datos en particular, la técnica de redes neuronales MLP demuestra ser más efectiva en la predicción realizada. Esto se fundamenta en la evidencia de un menor error registrado en las tres métricas calculadas, tanto durante la fase de entrenamiento como en la fase de prueba.\n:::\n:::\n\n## Pronóstico de los próximos 30 días\n\n::: {.content-visible when-format=\"html\" style=\"text-align: justify\"}\nTras la identificación del modelo óptimo, se procedió a prever el comportamiento futuro de la serie temporal de casos confirmados para los próximos 30 días utilizando dicho modelo. Se elaboraron representaciones gráficas de la predicción de casos confirmados de COVID-19 a 30 días, realizando una comparación de la efectividad entre las implementaciones de redes neuronales en la paquetería de R y la paquetería nativa de Python, las cuales se encuentran en las figuras @fig-foremlp y @fig-mlp, respectivamente.\n:::\n\n::: {.content-visible when-format=\"pdf\" style=\"text-align: justify\"}\nTras la identificación del modelo óptimo, se procedió a prever el comportamiento futuro de la serie temporal de casos confirmados para los próximos 30 días utilizando dicho modelo. Se elaboraron representaciones gráficas de la predicción de casos confirmados de COVID-19 a 30 días, realizando una comparación de la efectividad entre las implementaciones de redes neuronales en la paquetería de R y la paquetería nativa de Python, las cuales se encuentran en las figuras @fig-foremlp y @fig-mlp1, respectivamente.\n:::\n\n### Implementación en R\n\n::: {style=\"text-align: justify\"}\nEn la implementación de R, siguiendo el mismo procedimiento que en las fases de entrenamiento y prueba, se empleó un número específico de capas y nodos ocultos determinados automáticamente a través del método de validación cruzada de 5 pliegues. Esta configuración se llevó a cabo con una función de activación sigmoide, ejecutando 20 iteraciones para el entrenamiento de la red neuronal.\n\n```{r}\nfit.mlp = mlp(ts(Confirmed_df$Confirmed), reps = 20, hd.auto.type = 'cv', \n              comb=\"median\")\nfore.mlp = forecast(fit.mlp, h = 30)\n```\n\n::: {#fig-foremlp}\n```{r,echo=FALSE}\nplot(fore.mlp)\n```\n\nPredicción futura de la serie tiempo para infectados diariamente mediante el modelo MLP.\n:::\n\n::: {.content-visible when-format=\"html\"}\n::: {style=\"text-align: justify\"}\nLos resultados del pronóstico indican que, el 14 de septiembre de 2020, se proyectan aproximadamente 2494 nuevos casos confirmados de COVID-19. Estos valores correspondientes al período de 30 días se detallan a continuación en la @tbl-treinta .\n:::\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n::: {style=\"text-align: justify\"}\nLos resultados del pronóstico indican que el 14 de septiembre de 2020 se proyectan aproximadamente 2494 nuevos casos confirmados de COVID-19. Estos valores correspondientes al período de 30 días se detallan a continuación en la @tbl-treintapdf .\n:::\n:::\n\n::: {.content-visible when-format=\"html\"}\n```{r, echo=FALSE}\n#| label: tbl-treinta\n#| tbl-cap: \"Pronóstico de casos confirmados de COVID-19 en Irán en los próximos 30 días.\"\n#|\nd=data.frame(Fecha=COVID.IRAN$Date[179:208], Infectados=round(fore.mlp$mean,3))\nDT::datatable(d, style = 'bootstrap4')\n```\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n```{r, echo=FALSE}\n#| label: tbl-treintapdf\n#| tbl-cap: \"Pronóstico de casos confirmados de COVID-19 en Irán en los próximos 30 días.\"\n#|\nd=data.frame(Fecha=COVID.IRAN$Date[179:208], Infectados=round(fore.mlp$mean,3))\nd\n```\n:::\n:::\n\n### Implementación en Python\n\n::: {style=\"text-align: justify\"}\nEn esta sección, se realizaron ajustes en el método para su implementación. Cada día proyectado se forma utilizando el dato del día anterior. En cada paso, se actualiza la secuencia de entrada eliminando el valor más antiguo e incorporando la predicción más reciente como el dato más reciente. Esta dinámica se representa esquemáticamente a continuación, donde $n$ representa la extensión de la secuencia de entrada y $T$ es la longitud de la serie temporal.\n\n$$\n\\begin{split}\ny:\\text{Observado}\\quad &\\quad \\hat{y}:\\text{Pronosticado}\\\\\ny_{T-n+1}\\quad y_{T-n+2}\\quad y_{T-n+3}\\quad&\\cdots\\quad y_{T-2}\\quad y_{T-1}\\quad y_T\\quad \\to\\quad \\hat{y}_{T+1}\\\\\ny_{T-n+2}\\quad y_{T-n+3}\\quad y_{T-n+4}\\quad&\\cdots\\quad y_{T-1}\\quad y_{T}\\quad \\hat{y}_{T+1}\\quad \\to\\quad \\hat{y}_{T+2}\\\\\ny_{T-n+3}\\quad y_{T-n+4}\\quad y_{T-n+5}\\quad&\\cdots\\quad y_{T}\\quad \\hat{y}_{T+1}\\quad \\hat{y}_{T+2}\\quad \\to\\quad \\hat{y}_{T+3}\\\\\n&\\ddots\\\\\n\\end{split}\n$$\n\nSe exhibe a continuación el código utilizado y el gráfico correspondiente al pronóstico generado por la red neuronal.\n:::\n\n::: {.content-visible when-format=\"html\"}\n::: {.callout-caution collapse=\"true\" icon=\"false\"}\n## ▸ Código\n\n``` python\nimport numpy as np\nimport pandas as pd\nimport yfinance as yf\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom tensorflow.keras.layers import Dense, LSTM\nfrom tensorflow.keras.models import Sequential\nfrom sklearn.preprocessing import MinMaxScaler\n\npd.options.mode.chained_assignment = None\ntf.random.set_seed(0)\ndf = pd.read_excel('Data.xlsx')\n\n# ------------- Entrenamiento y prueba del modelo --------------\ny = df['Confirmed'].fillna(method='ffill')\ny = y.values.reshape(-1, 1)\n# scale the data\nscaler = MinMaxScaler(feature_range=(0, 1))\nscaler = scaler.fit(y)\ny = scaler.transform(y)\n\n# generate the input and output sequences\nn_lookback = 53  # length of input sequences (lookback period)\nn_forecast = 30  # length of output sequences (forecast period)\n\nX = []\nY = []\n\nfor i in range(n_lookback, len(y) - n_forecast + 1):\n    X.append(y[i - n_lookback: i])\n    Y.append(y[i: i + n_forecast])\n\nX = np.array(X)\nY = np.array(Y)\n\n# fit the model\nmodel = Sequential()\nmodel.add(Dense(20, activation='sigmoid', input_dim=n_lookback))\nmodel.add(Dense(n_forecast))\n\nmodel.compile(loss='mean_squared_error', optimizer='adam')\nmodel.fit(X, Y, epochs=20, batch_size=4, verbose=0)\n\n# generate the forecasts\nX_ = y[- n_lookback:]  # last available input sequence\nX_ = X_.reshape(1, n_lookback, 1)\n\nY_ = model.predict(X_).reshape(-1, 1)\nY_ = scaler.inverse_transform(Y_)\n\n# organize the results in a data frame\ndf_past = df\ndf_past.rename(columns={'Date':'Date','Confirmed':'Actual'},inplace=True)\ndf_past['Date'] = pd.to_datetime(df_past['Date'])\ndf_past['Forecast'] = np.nan\ndf_past['Forecast'].iloc[-1] = df_past['Actual'].iloc[-1]\n\ndf_future = pd.DataFrame(columns=['Date', 'Actual', 'Forecast'])\ndf_future['Date'] = pd.date_range(\n  start=df_past['Date'].iloc[-1] + pd.Timedelta(days=1), \n  periods=n_forecast)\ndf_future['Forecast'] = Y_.flatten()\ndf_future['Actual'] = np.nan\n\nresults = df_past._append(df_future).set_index('Date')\n# Calculate minimum, median, and maximum for each forecasted date\nresults['Min'] = results['Forecast'].rolling(window=2).min()\nresults['Max'] = results['Forecast'].rolling(window=2).max()\nresults['Median'] = results['Forecast'].rolling(window=2).median()\n\n# Creamos la gráfica con las predicciones\n#fig = px.line(results, x=results.index, y=['Actual','Forecast', 'Median'],\nfig = px.line(results, x=results.index, y=['Actual', 'Median'],\n              labels={'index': 'Date', 'value': 'Confirmed Cases'},\n              title='Casos Confirmados',\n              line_shape='linear')\n\nfig.update_traces(line=dict(color='cornflowerblue'), \nselector=dict(name='Actual'))\nfig.update_traces(line=dict(color='orange'), \nselector=dict(name='Forecast'))\nfig.update_traces(line=dict(color='mediumvioletred'), \nselector=dict(name='Median'))\n\n# Agregar gráficos de área para el mínimo y el máximo\nfig.add_trace(\n    go.Scatter(x=results.index, \n    y=results['Min'], \n    fill=None, mode='lines', \n    line=dict(color='hotpink'), \n    name='Min'))\nfig.add_trace(\n    go.Scatter(x=results.index, \n    y=results['Max'], \n    fill='tonexty', \n    mode='lines', \n    line=dict(color='deeppink'), \n    name='Max'))\nfig.show('')\n```\n:::\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n``` python\nimport numpy as np\nimport pandas as pd\nimport yfinance as yf\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom tensorflow.keras.layers import Dense, LSTM\nfrom tensorflow.keras.models import Sequential\nfrom sklearn.preprocessing import MinMaxScaler\n\npd.options.mode.chained_assignment = None\ntf.random.set_seed(0)\ndf = pd.read_excel('Data.xlsx')\n\n# ------------- Entrenamiento y prueba del modelo --------------\ny = df['Confirmed'].fillna(method='ffill')\ny = y.values.reshape(-1, 1)\n# scale the data\nscaler = MinMaxScaler(feature_range=(0, 1))\nscaler = scaler.fit(y)\ny = scaler.transform(y)\n\n# generate the input and output sequences\nn_lookback = 53  # length of input sequences (lookback period)\nn_forecast = 30  # length of output sequences (forecast period)\n\nX = []\nY = []\n\nfor i in range(n_lookback, len(y) - n_forecast + 1):\n    X.append(y[i - n_lookback: i])\n    Y.append(y[i: i + n_forecast])\n\nX = np.array(X)\nY = np.array(Y)\n\n# fit the model\nmodel = Sequential()\nmodel.add(Dense(20, activation='sigmoid', input_dim=n_lookback))\nmodel.add(Dense(n_forecast))\n\nmodel.compile(loss='mean_squared_error', optimizer='adam')\nmodel.fit(X, Y, epochs=20, batch_size=4, verbose=0)\n\n# generate the forecasts\nX_ = y[- n_lookback:]  # last available input sequence\nX_ = X_.reshape(1, n_lookback, 1)\n\nY_ = model.predict(X_).reshape(-1, 1)\nY_ = scaler.inverse_transform(Y_)\n\n# organize the results in a data frame\ndf_past = df\ndf_past.rename(columns={'Date': 'Date', 'Confirmed': 'Actual'}, inplace=True)\ndf_past['Date'] = pd.to_datetime(df_past['Date'])\ndf_past['Forecast'] = np.nan\ndf_past['Forecast'].iloc[-1] = df_past['Actual'].iloc[-1]\n\ndf_future = pd.DataFrame(columns=['Date', 'Actual', 'Forecast'])\ndf_future['Date'] = pd.date_range(\n  start=df_past['Date'].iloc[-1] + pd.Timedelta(days=1), \n  periods=n_forecast)\ndf_future['Forecast'] = Y_.flatten()\ndf_future['Actual'] = np.nan\n\nresults = df_past._append(df_future).set_index('Date')\n# Calculate minimum, median, and maximum for each forecasted date\nresults['Min'] = results['Forecast'].rolling(window=2).min()\nresults['Max'] = results['Forecast'].rolling(window=2).max()\nresults['Median'] = results['Forecast'].rolling(window=2).median()\n\n# Creamos la gráfica con las predicciones\n#fig = px.line(results, x=results.index, y=['Actual','Forecast', 'Median'],\nfig = px.line(results, x=results.index, y=['Actual', 'Median'],\n              labels={'index': 'Date', 'value': 'Confirmed Cases'},\n              title='Casos Confirmados',\n              line_shape='linear')\n\nfig.update_traces(line=dict(color='cornflowerblue'), \nselector=dict(name='Actual'))\nfig.update_traces(line=dict(color='orange'), \nselector=dict(name='Forecast'))\nfig.update_traces(line=dict(color='mediumvioletred'), \nselector=dict(name='Median'))\n\n# Agregar gráficos de área para el mínimo y el máximo\nfig.add_trace(\n    go.Scatter(x=results.index, \n    y=results['Min'], \n    fill=None, mode='lines', \n    line=dict(color='hotpink'), \n    name='Min'))\nfig.add_trace(\n    go.Scatter(x=results.index, \n    y=results['Max'], \n    fill='tonexty', \n    mode='lines', \n    line=dict(color='deeppink'), \n    name='Max'))\nfig.show('')\n```\n:::\n\n::: {.content-visible when-format=\"html\"}\n```{python, eval=knitr::is_html_output()}\n#| output: false\n#| include: false\nimport numpy as np\nimport pandas as pd\nimport yfinance as yf\nfrom silence_tensorflow import silence_tensorflow\nsilence_tensorflow()\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\nimport plotly.io as pio\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom tensorflow.keras.layers import Dense, LSTM\nfrom tensorflow.keras.models import Sequential\nfrom sklearn.preprocessing import MinMaxScaler\npd.options.mode.chained_assignment = None\ntf.random.set_seed(0) \ndf = pd.read_excel('Data.xlsx')\n# ------------- Entrenamiento y prueba del modelo --------------\ny = df['Confirmed'].fillna(method='ffill')\ny = y.values.reshape(-1, 1)\n# scale the data\nscaler = MinMaxScaler(feature_range=(0, 1))\nscaler = scaler.fit(y)\ny = scaler.transform(y)\n\n# generate the input and output sequences\nn_lookback = 53  # length of input sequences (lookback period)\nn_forecast = 30  # length of output sequences (forecast period)\n\nX = []\nY = []\n\nfor i in range(n_lookback, len(y) - n_forecast + 1):\n    X.append(y[i - n_lookback: i])\n    Y.append(y[i: i + n_forecast])\n\nX = np.array(X)\nY = np.array(Y)\n\n# fit the model\nmodel = Sequential()\nmodel.add(Dense(20, activation='sigmoid', input_dim=n_lookback))\nmodel.add(Dense(n_forecast))\n\nmodel.compile(loss='mean_squared_error', optimizer='adam')\nmodel.fit(X, Y, epochs=20, batch_size=4, verbose=0)\n\n# generate the forecasts\nX_ = y[- n_lookback:]  # last available input sequence\nX_ = X_.reshape(1, n_lookback, 1)\n\nY_ = model.predict(X_).reshape(-1, 1)\nY_ = scaler.inverse_transform(Y_)\n\n# organize the results in a data frame\ndf_past = df\ndf_past.rename(columns={'Date': 'Date', 'Confirmed': 'Actual'}, inplace=True)\ndf_past['Date'] = pd.to_datetime(df_past['Date'])\ndf_past['Forecast'] = np.nan\ndf_past['Forecast'].iloc[-1] = df_past['Actual'].iloc[-1]\n\ndf_future = pd.DataFrame(columns=['Date', 'Actual', 'Forecast'])\ndf_future['Date'] = pd.date_range(\n  start=df_past['Date'].iloc[-1] + pd.Timedelta(days=1), \n  periods=n_forecast)\ndf_future['Forecast'] = Y_.flatten()\ndf_future['Actual'] = np.nan\n\nresults = df_past._append(df_future).set_index('Date')\n# Calculate minimum, median, and maximum for each forecasted date\nresults['Min'] = results['Forecast'].rolling(window=2).min()\nresults['Max'] = results['Forecast'].rolling(window=2).max()\nresults['Median'] = results['Forecast'].rolling(window=2).median()\n\n# Creamos la gráfica con las predicciones\n#fig = px.line(results, x=results.index, y=['Actual','Forecast', 'Median'],\nfig = px.line(results, x=results.index, y=['Actual', 'Median'],\n              labels={'index': 'Date', 'value': 'Confirmed Cases'},\n              title='Casos Confirmados',\n              line_shape='linear')\n\nfig.update_traces(line=dict(color='cornflowerblue'), \n                  selector=dict(name='Actual'))\nfig.update_traces(line=dict(color='orange'), \n                  selector=dict(name='Forecast'))\nfig.update_traces(line=dict(color='mediumvioletred'), \n                  selector=dict(name='Median'))\n\n# Agregar gráficos de área para el mínimo y el máximo\nfig.add_trace(\n    go.Scatter(x=results.index, \n               y=results['Min'], \n               fill=None, mode='lines', \n               line=dict(color='hotpink'), \n               name='Min'))\nfig.add_trace(\n    go.Scatter(x=results.index, \n               y=results['Max'], \n               fill='tonexty', \n               mode='lines', \n               line=dict(color='deeppink'), \n               name='Max'))\n```\n:::\n\n::: {.content-visible when-format=\"html\"}\n```{python, eval=knitr::is_html_output()}\n#| label: fig-mlp\n#| fig-cap: 'Pronóstico de casos confirmados de COVID-19 en Irán en los próximos 30 días (implementación en python.)'\n#| echo: false\nfig.show('')\n```\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n![Pronostico de casos confirmados de COVID-19 en Irán (implementación en Python).](Imagenes/Confirmados.png){#fig-mlp1 fig-align=\"center\"}\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n::: {style=\"text-align: justify\"}\nLos resultados del pronóstico en @fig-mlp1 indican que, el 14 de Septiembre de 2020, se proyectan aproximadamente 2476 nuevos casos confirmados de COVID-19.\n:::\n:::\n\n::: {.content-visible when-format=\"html\"}\n::: {style=\"text-align: justify\"}\nLos resultados del pronóstico en @fig-mlp indican que, el 14 de Septiembre de 2020, se proyectan aproximadamente 2476 nuevos casos confirmados de COVID-19.\n:::\n:::\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","highlight-style":"a11y","html-math-method":"mathjax","output-file":"confirmados.html"},"language":{"toc-title-document":"Tabla de contenidos","toc-title-website":"En esta página","related-formats-title":"Otros formatos","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Fuente","other-links-title":"Otros Enlaces","code-links-title":"Enlaces de código","launch-dev-container-title":"Iniciar Dev Container","launch-binder-title":"Iniciar Binder","article-notebook-label":"Cuaderno de Artículo","notebook-preview-download":"Descargar Cuaderno","notebook-preview-download-src":"Descargar código fuente","notebook-preview-back":"Volver al Artículo","manuscript-meca-bundle":"Archivo MECA","section-title-abstract":"Resumen","section-title-appendices":"Apéndices","section-title-footnotes":"Notas","section-title-references":"Referencias","section-title-reuse":"Reutilización","section-title-copyright":"Derechos de autor","section-title-citation":"Cómo citar","appendix-attribution-cite-as":"Por favor, cita este trabajo como:","appendix-attribution-bibtex":"BibTeX","appendix-view-license":"Ver Licencia","title-block-author-single":"Autor/a","title-block-author-plural":"Autores/as","title-block-affiliation-single":"Afiliación","title-block-affiliation-plural":"Afiliaciones","title-block-published":"Fecha de publicación","title-block-modified":"Fecha de modificación","title-block-keywords":"Palabras clave","callout-tip-title":"Tip","callout-note-title":"Nota","callout-warning-title":"Advertencia","callout-important-title":"Importante","callout-caution-title":"Precaución","code-summary":"Código","code-tools-menu-caption":"Código","code-tools-show-all-code":"Mostrar todo el código","code-tools-hide-all-code":"Ocultar todo el código","code-tools-view-source":"Ver el código fuente","code-tools-source-code":"Ejecutar el código","tools-share":"Compartir","tools-download":"Descargar","code-line":"Línea","code-lines":"Líneas","copy-button-tooltip":"Copiar al portapapeles","copy-button-tooltip-success":"Copiado","repo-action-links-edit":"Editar esta página","repo-action-links-source":"Ver el código","repo-action-links-issue":"Informar de un problema","back-to-top":"Volver arriba","search-no-results-text":"Sin resultados","search-matching-documents-text":"documentos encontrados","search-copy-link-title":"Copiar el enlace en la búsqueda","search-hide-matches-text":"Ocultar resultados adicionales","search-more-match-text":"resultado adicional en este documento","search-more-matches-text":"resultados adicionales en este documento","search-clear-button-title":"Borrar","search-text-placeholder":"","search-detached-cancel-button-title":"Cancelar","search-submit-button-title":"Enviar","search-label":"Buscar","toggle-section":"Alternar sección","toggle-sidebar":"Alternar barra lateral","toggle-dark-mode":"Alternar modo oscuro","toggle-reader-mode":"Alternar modo lector","toggle-navigation":"Navegación de palanca","crossref-fig-title":"Figura","crossref-tbl-title":"Tabla","crossref-lst-title":"Listado","crossref-thm-title":"Teorema","crossref-lem-title":"Lema","crossref-cor-title":"Corolario","crossref-prp-title":"Proposición","crossref-cnj-title":"Conjetura","crossref-def-title":"Definición","crossref-exm-title":"Ejemplo","crossref-exr-title":"Ejercicio","crossref-ch-prefix":"Capítulo","crossref-apx-prefix":"Apéndice","crossref-sec-prefix":"Sección","crossref-eq-prefix":"Ecuación","crossref-lof-title":"Listado de Figuras","crossref-lot-title":"Listado de Tablas","crossref-lol-title":"Listado de Listados","environment-proof-title":"Prueba","environment-remark-title":"Observación","environment-solution-title":"Solución","listing-page-order-by":"Ordenar por","listing-page-order-by-default":"Por defecto","listing-page-order-by-date-asc":"Menos reciente","listing-page-order-by-date-desc":"Más reciente","listing-page-order-by-number-desc":"De mayor a menor","listing-page-order-by-number-asc":"De menor a mayor","listing-page-field-date":"Fecha","listing-page-field-title":"Título","listing-page-field-description":"Descripción","listing-page-field-author":"Autor/a","listing-page-field-filename":"Nombre de archivo","listing-page-field-filemodified":"Fecha de modificación","listing-page-field-subtitle":"Subtítulo","listing-page-field-readingtime":"Tiempo de lectura","listing-page-field-wordcount":"Conteo de Palabras","listing-page-field-categories":"Categorías","listing-page-minutes-compact":"{0} minutos","listing-page-category-all":"Todas","listing-page-no-matches":"No hay resultados","listing-page-words":"{0} palabras","listing-page-filter":"Filtro","draft":"Borrador"},"metadata":{"lang":"es","fig-responsive":true,"quarto-version":"1.5.26","comments":{"hypothesis":true},"bibliography":["references.bib"],"editor":"visual","theme":{"dark":"darkly","light":"cerulean"},"grid":{"sidebar-width":"300px","body-width":"900px","margin-width":"300px","gutter-width":"1.5rem"},"code-copy":true},"extensions":{"book":{"multiFile":true}}},"pdf":{"identifier":{"display-name":"PDF","target-format":"pdf","base-format":"pdf"},"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":true,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","include-in-header":["packa.tex"],"output-file":"confirmados.pdf"},"language":{"toc-title-document":"Tabla de contenidos","toc-title-website":"En esta página","related-formats-title":"Otros formatos","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Fuente","other-links-title":"Otros Enlaces","code-links-title":"Enlaces de código","launch-dev-container-title":"Iniciar Dev Container","launch-binder-title":"Iniciar Binder","article-notebook-label":"Cuaderno de Artículo","notebook-preview-download":"Descargar Cuaderno","notebook-preview-download-src":"Descargar código fuente","notebook-preview-back":"Volver al Artículo","manuscript-meca-bundle":"Archivo MECA","section-title-abstract":"Resumen","section-title-appendices":"Apéndices","section-title-footnotes":"Notas","section-title-references":"Referencias","section-title-reuse":"Reutilización","section-title-copyright":"Derechos de autor","section-title-citation":"Cómo citar","appendix-attribution-cite-as":"Por favor, cita este trabajo como:","appendix-attribution-bibtex":"BibTeX","appendix-view-license":"Ver Licencia","title-block-author-single":"Autor/a","title-block-author-plural":"Autores/as","title-block-affiliation-single":"Afiliación","title-block-affiliation-plural":"Afiliaciones","title-block-published":"Fecha de publicación","title-block-modified":"Fecha de modificación","title-block-keywords":"Palabras clave","callout-tip-title":"Tip","callout-note-title":"Nota","callout-warning-title":"Advertencia","callout-important-title":"Importante","callout-caution-title":"Precaución","code-summary":"Código","code-tools-menu-caption":"Código","code-tools-show-all-code":"Mostrar todo el código","code-tools-hide-all-code":"Ocultar todo el código","code-tools-view-source":"Ver el código fuente","code-tools-source-code":"Ejecutar el código","tools-share":"Compartir","tools-download":"Descargar","code-line":"Línea","code-lines":"Líneas","copy-button-tooltip":"Copiar al portapapeles","copy-button-tooltip-success":"Copiado","repo-action-links-edit":"Editar esta página","repo-action-links-source":"Ver el código","repo-action-links-issue":"Informar de un problema","back-to-top":"Volver arriba","search-no-results-text":"Sin resultados","search-matching-documents-text":"documentos encontrados","search-copy-link-title":"Copiar el enlace en la búsqueda","search-hide-matches-text":"Ocultar resultados adicionales","search-more-match-text":"resultado adicional en este documento","search-more-matches-text":"resultados adicionales en este documento","search-clear-button-title":"Borrar","search-text-placeholder":"","search-detached-cancel-button-title":"Cancelar","search-submit-button-title":"Enviar","search-label":"Buscar","toggle-section":"Alternar sección","toggle-sidebar":"Alternar barra lateral","toggle-dark-mode":"Alternar modo oscuro","toggle-reader-mode":"Alternar modo lector","toggle-navigation":"Navegación de palanca","crossref-fig-title":"Figura","crossref-tbl-title":"Tabla","crossref-lst-title":"Listado","crossref-thm-title":"Teorema","crossref-lem-title":"Lema","crossref-cor-title":"Corolario","crossref-prp-title":"Proposición","crossref-cnj-title":"Conjetura","crossref-def-title":"Definición","crossref-exm-title":"Ejemplo","crossref-exr-title":"Ejercicio","crossref-ch-prefix":"Capítulo","crossref-apx-prefix":"Apéndice","crossref-sec-prefix":"Sección","crossref-eq-prefix":"Ecuación","crossref-lof-title":"Listado de Figuras","crossref-lot-title":"Listado de Tablas","crossref-lol-title":"Listado de Listados","environment-proof-title":"Prueba","environment-remark-title":"Observación","environment-solution-title":"Solución","listing-page-order-by":"Ordenar por","listing-page-order-by-default":"Por defecto","listing-page-order-by-date-asc":"Menos reciente","listing-page-order-by-date-desc":"Más reciente","listing-page-order-by-number-desc":"De mayor a menor","listing-page-order-by-number-asc":"De menor a mayor","listing-page-field-date":"Fecha","listing-page-field-title":"Título","listing-page-field-description":"Descripción","listing-page-field-author":"Autor/a","listing-page-field-filename":"Nombre de archivo","listing-page-field-filemodified":"Fecha de modificación","listing-page-field-subtitle":"Subtítulo","listing-page-field-readingtime":"Tiempo de lectura","listing-page-field-wordcount":"Conteo de Palabras","listing-page-field-categories":"Categorías","listing-page-minutes-compact":"{0} minutos","listing-page-category-all":"Todas","listing-page-no-matches":"No hay resultados","listing-page-words":"{0} palabras","listing-page-filter":"Filtro","draft":"Borrador"},"metadata":{"block-headings":true,"comments":{"hypothesis":true},"bibliography":["references.bib"],"editor":"visual","lang":"es","template-partials":["before-body.tex"],"documentclass":"scrreprt","papersize":"us-letter","titlegraphic":"FCFMLOGO.png","institution":"Universidad Autónoma de Chiapas","email":"jennifer.lopez67@unach.mx"},"extensions":{"book":{"selfContainedOutput":true}}},"epub":{"identifier":{"display-name":"ePub","target-format":"epub","base-format":"epub"},"execute":{"fig-width":5,"fig-height":4,"fig-format":"png","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"epub","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":false,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"default-image-extension":"png","html-math-method":"mathml","to":"epub","output-file":"confirmados.epub"},"language":{"toc-title-document":"Tabla de contenidos","toc-title-website":"En esta página","related-formats-title":"Otros formatos","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Fuente","other-links-title":"Otros Enlaces","code-links-title":"Enlaces de código","launch-dev-container-title":"Iniciar Dev Container","launch-binder-title":"Iniciar Binder","article-notebook-label":"Cuaderno de Artículo","notebook-preview-download":"Descargar Cuaderno","notebook-preview-download-src":"Descargar código fuente","notebook-preview-back":"Volver al Artículo","manuscript-meca-bundle":"Archivo MECA","section-title-abstract":"Resumen","section-title-appendices":"Apéndices","section-title-footnotes":"Notas","section-title-references":"Referencias","section-title-reuse":"Reutilización","section-title-copyright":"Derechos de autor","section-title-citation":"Cómo citar","appendix-attribution-cite-as":"Por favor, cita este trabajo como:","appendix-attribution-bibtex":"BibTeX","appendix-view-license":"Ver Licencia","title-block-author-single":"Autor/a","title-block-author-plural":"Autores/as","title-block-affiliation-single":"Afiliación","title-block-affiliation-plural":"Afiliaciones","title-block-published":"Fecha de publicación","title-block-modified":"Fecha de modificación","title-block-keywords":"Palabras clave","callout-tip-title":"Tip","callout-note-title":"Nota","callout-warning-title":"Advertencia","callout-important-title":"Importante","callout-caution-title":"Precaución","code-summary":"Código","code-tools-menu-caption":"Código","code-tools-show-all-code":"Mostrar todo el código","code-tools-hide-all-code":"Ocultar todo el código","code-tools-view-source":"Ver el código fuente","code-tools-source-code":"Ejecutar el código","tools-share":"Compartir","tools-download":"Descargar","code-line":"Línea","code-lines":"Líneas","copy-button-tooltip":"Copiar al portapapeles","copy-button-tooltip-success":"Copiado","repo-action-links-edit":"Editar esta página","repo-action-links-source":"Ver el código","repo-action-links-issue":"Informar de un problema","back-to-top":"Volver arriba","search-no-results-text":"Sin resultados","search-matching-documents-text":"documentos encontrados","search-copy-link-title":"Copiar el enlace en la búsqueda","search-hide-matches-text":"Ocultar resultados adicionales","search-more-match-text":"resultado adicional en este documento","search-more-matches-text":"resultados adicionales en este documento","search-clear-button-title":"Borrar","search-text-placeholder":"","search-detached-cancel-button-title":"Cancelar","search-submit-button-title":"Enviar","search-label":"Buscar","toggle-section":"Alternar sección","toggle-sidebar":"Alternar barra lateral","toggle-dark-mode":"Alternar modo oscuro","toggle-reader-mode":"Alternar modo lector","toggle-navigation":"Navegación de palanca","crossref-fig-title":"Figura","crossref-tbl-title":"Tabla","crossref-lst-title":"Listado","crossref-thm-title":"Teorema","crossref-lem-title":"Lema","crossref-cor-title":"Corolario","crossref-prp-title":"Proposición","crossref-cnj-title":"Conjetura","crossref-def-title":"Definición","crossref-exm-title":"Ejemplo","crossref-exr-title":"Ejercicio","crossref-ch-prefix":"Capítulo","crossref-apx-prefix":"Apéndice","crossref-sec-prefix":"Sección","crossref-eq-prefix":"Ecuación","crossref-lof-title":"Listado de Figuras","crossref-lot-title":"Listado de Tablas","crossref-lol-title":"Listado de Listados","environment-proof-title":"Prueba","environment-remark-title":"Observación","environment-solution-title":"Solución","listing-page-order-by":"Ordenar por","listing-page-order-by-default":"Por defecto","listing-page-order-by-date-asc":"Menos reciente","listing-page-order-by-date-desc":"Más reciente","listing-page-order-by-number-desc":"De mayor a menor","listing-page-order-by-number-asc":"De menor a mayor","listing-page-field-date":"Fecha","listing-page-field-title":"Título","listing-page-field-description":"Descripción","listing-page-field-author":"Autor/a","listing-page-field-filename":"Nombre de archivo","listing-page-field-filemodified":"Fecha de modificación","listing-page-field-subtitle":"Subtítulo","listing-page-field-readingtime":"Tiempo de lectura","listing-page-field-wordcount":"Conteo de Palabras","listing-page-field-categories":"Categorías","listing-page-minutes-compact":"{0} minutos","listing-page-category-all":"Todas","listing-page-no-matches":"No hay resultados","listing-page-words":"{0} palabras","listing-page-filter":"Filtro","draft":"Borrador"},"metadata":{"comments":{"hypothesis":true},"bibliography":["references.bib"],"editor":"visual","cover-image":"FCFMLOGO.png","lang":"es"},"extensions":{"book":{"selfContainedOutput":true}}}},"projectFormats":["html","pdf","epub"]}